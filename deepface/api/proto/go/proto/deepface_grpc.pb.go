// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: deepface.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeepFaceServiceClient is the client API for DeepFaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeepFaceServiceClient interface {
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error)
	Represent(ctx context.Context, in *RepresentRequest, opts ...grpc.CallOption) (*RepresentResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
}

type deepFaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeepFaceServiceClient(cc grpc.ClientConnInterface) DeepFaceServiceClient {
	return &deepFaceServiceClient{cc}
}

func (c *deepFaceServiceClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := c.cc.Invoke(ctx, "/deepface.api.proto.DeepFaceService/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deepFaceServiceClient) Represent(ctx context.Context, in *RepresentRequest, opts ...grpc.CallOption) (*RepresentResponse, error) {
	out := new(RepresentResponse)
	err := c.cc.Invoke(ctx, "/deepface.api.proto.DeepFaceService/Represent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deepFaceServiceClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/deepface.api.proto.DeepFaceService/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeepFaceServiceServer is the server API for DeepFaceService service.
// All implementations must embed UnimplementedDeepFaceServiceServer
// for forward compatibility
type DeepFaceServiceServer interface {
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error)
	Represent(context.Context, *RepresentRequest) (*RepresentResponse, error)
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	mustEmbedUnimplementedDeepFaceServiceServer()
}

// UnimplementedDeepFaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeepFaceServiceServer struct {
}

func (UnimplementedDeepFaceServiceServer) Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedDeepFaceServiceServer) Represent(context.Context, *RepresentRequest) (*RepresentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Represent not implemented")
}
func (UnimplementedDeepFaceServiceServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedDeepFaceServiceServer) mustEmbedUnimplementedDeepFaceServiceServer() {}

// UnsafeDeepFaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeepFaceServiceServer will
// result in compilation errors.
type UnsafeDeepFaceServiceServer interface {
	mustEmbedUnimplementedDeepFaceServiceServer()
}

func RegisterDeepFaceServiceServer(s grpc.ServiceRegistrar, srv DeepFaceServiceServer) {
	s.RegisterService(&DeepFaceService_ServiceDesc, srv)
}

func _DeepFaceService_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepFaceServiceServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deepface.api.proto.DeepFaceService/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepFaceServiceServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeepFaceService_Represent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepresentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepFaceServiceServer).Represent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deepface.api.proto.DeepFaceService/Represent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepFaceServiceServer).Represent(ctx, req.(*RepresentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeepFaceService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepFaceServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deepface.api.proto.DeepFaceService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepFaceServiceServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeepFaceService_ServiceDesc is the grpc.ServiceDesc for DeepFaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeepFaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deepface.api.proto.DeepFaceService",
	HandlerType: (*DeepFaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _DeepFaceService_Analyze_Handler,
		},
		{
			MethodName: "Represent",
			Handler:    _DeepFaceService_Represent_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _DeepFaceService_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deepface.proto",
}
