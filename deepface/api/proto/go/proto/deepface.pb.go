// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.29.3
// source: deepface.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ----------------
// Common enums for models, detectors, and distance metrics
// ----------------
type Models int32

const (
	Models_VGG_FACE     Models = 0
	Models_FACENET      Models = 1
	Models_FACENET512   Models = 2
	Models_OPENFACE     Models = 3
	Models_DEEPFACE     Models = 4
	Models_DEEPID       Models = 5
	Models_ARCFACE      Models = 6
	Models_DLIB_MODEL   Models = 7
	Models_SFACE        Models = 8
	Models_GHOSTFACENET Models = 9
	Models_BUFFALO_L    Models = 10
)

// Enum value maps for Models.
var (
	Models_name = map[int32]string{
		0:  "VGG_FACE",
		1:  "FACENET",
		2:  "FACENET512",
		3:  "OPENFACE",
		4:  "DEEPFACE",
		5:  "DEEPID",
		6:  "ARCFACE",
		7:  "DLIB_MODEL",
		8:  "SFACE",
		9:  "GHOSTFACENET",
		10: "BUFFALO_L",
	}
	Models_value = map[string]int32{
		"VGG_FACE":     0,
		"FACENET":      1,
		"FACENET512":   2,
		"OPENFACE":     3,
		"DEEPFACE":     4,
		"DEEPID":       5,
		"ARCFACE":      6,
		"DLIB_MODEL":   7,
		"SFACE":        8,
		"GHOSTFACENET": 9,
		"BUFFALO_L":    10,
	}
)

func (x Models) Enum() *Models {
	p := new(Models)
	*p = x
	return p
}

func (x Models) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Models) Descriptor() protoreflect.EnumDescriptor {
	return file_deepface_proto_enumTypes[0].Descriptor()
}

func (Models) Type() protoreflect.EnumType {
	return &file_deepface_proto_enumTypes[0]
}

func (x Models) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Models.Descriptor instead.
func (Models) EnumDescriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{0}
}

type Detectors int32

const (
	Detectors_OPENCV     Detectors = 0
	Detectors_SSD        Detectors = 1
	Detectors_DLIB       Detectors = 2
	Detectors_MTCNN      Detectors = 3
	Detectors_FASTMTCNN  Detectors = 4
	Detectors_RETINAFACE Detectors = 5
	Detectors_MEDIAPIPE  Detectors = 6
	Detectors_YOLOV8     Detectors = 7
	Detectors_YOLOV11S   Detectors = 8
	Detectors_YOLOV11N   Detectors = 9
	Detectors_YOLOV11M   Detectors = 10
	Detectors_YUNET      Detectors = 11
	Detectors_CENTERFACE Detectors = 12
)

// Enum value maps for Detectors.
var (
	Detectors_name = map[int32]string{
		0:  "OPENCV",
		1:  "SSD",
		2:  "DLIB",
		3:  "MTCNN",
		4:  "FASTMTCNN",
		5:  "RETINAFACE",
		6:  "MEDIAPIPE",
		7:  "YOLOV8",
		8:  "YOLOV11S",
		9:  "YOLOV11N",
		10: "YOLOV11M",
		11: "YUNET",
		12: "CENTERFACE",
	}
	Detectors_value = map[string]int32{
		"OPENCV":     0,
		"SSD":        1,
		"DLIB":       2,
		"MTCNN":      3,
		"FASTMTCNN":  4,
		"RETINAFACE": 5,
		"MEDIAPIPE":  6,
		"YOLOV8":     7,
		"YOLOV11S":   8,
		"YOLOV11N":   9,
		"YOLOV11M":   10,
		"YUNET":      11,
		"CENTERFACE": 12,
	}
)

func (x Detectors) Enum() *Detectors {
	p := new(Detectors)
	*p = x
	return p
}

func (x Detectors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Detectors) Descriptor() protoreflect.EnumDescriptor {
	return file_deepface_proto_enumTypes[1].Descriptor()
}

func (Detectors) Type() protoreflect.EnumType {
	return &file_deepface_proto_enumTypes[1]
}

func (x Detectors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Detectors.Descriptor instead.
func (Detectors) EnumDescriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{1}
}

type DistanceMetrics int32

const (
	DistanceMetrics_COSINE       DistanceMetrics = 0
	DistanceMetrics_EUCLIDEAN    DistanceMetrics = 1
	DistanceMetrics_EUCLIDEAN_L2 DistanceMetrics = 2
	DistanceMetrics_ANGULAR      DistanceMetrics = 3
)

// Enum value maps for DistanceMetrics.
var (
	DistanceMetrics_name = map[int32]string{
		0: "COSINE",
		1: "EUCLIDEAN",
		2: "EUCLIDEAN_L2",
		3: "ANGULAR",
	}
	DistanceMetrics_value = map[string]int32{
		"COSINE":       0,
		"EUCLIDEAN":    1,
		"EUCLIDEAN_L2": 2,
		"ANGULAR":      3,
	}
)

func (x DistanceMetrics) Enum() *DistanceMetrics {
	p := new(DistanceMetrics)
	*p = x
	return p
}

func (x DistanceMetrics) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DistanceMetrics) Descriptor() protoreflect.EnumDescriptor {
	return file_deepface_proto_enumTypes[2].Descriptor()
}

func (DistanceMetrics) Type() protoreflect.EnumType {
	return &file_deepface_proto_enumTypes[2]
}

func (x DistanceMetrics) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DistanceMetrics.Descriptor instead.
func (DistanceMetrics) EnumDescriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{2}
}

type AnalyzeRequest_Action int32

const (
	AnalyzeRequest_AGE     AnalyzeRequest_Action = 0
	AnalyzeRequest_GENDER  AnalyzeRequest_Action = 1
	AnalyzeRequest_EMOTION AnalyzeRequest_Action = 2
	AnalyzeRequest_RACE    AnalyzeRequest_Action = 3
)

// Enum value maps for AnalyzeRequest_Action.
var (
	AnalyzeRequest_Action_name = map[int32]string{
		0: "AGE",
		1: "GENDER",
		2: "EMOTION",
		3: "RACE",
	}
	AnalyzeRequest_Action_value = map[string]int32{
		"AGE":     0,
		"GENDER":  1,
		"EMOTION": 2,
		"RACE":    3,
	}
)

func (x AnalyzeRequest_Action) Enum() *AnalyzeRequest_Action {
	p := new(AnalyzeRequest_Action)
	*p = x
	return p
}

func (x AnalyzeRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalyzeRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_deepface_proto_enumTypes[3].Descriptor()
}

func (AnalyzeRequest_Action) Type() protoreflect.EnumType {
	return &file_deepface_proto_enumTypes[3]
}

func (x AnalyzeRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalyzeRequest_Action.Descriptor instead.
func (AnalyzeRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{1, 0}
}

type FacialArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftEye    []uint32 `protobuf:"varint,1,rep,packed,name=left_eye,json=leftEye,proto3" json:"left_eye,omitempty"`
	RightEye   []uint32 `protobuf:"varint,2,rep,packed,name=right_eye,json=rightEye,proto3" json:"right_eye,omitempty"`
	MouthLeft  []uint32 `protobuf:"varint,3,rep,packed,name=mouth_left,json=mouthLeft,proto3" json:"mouth_left,omitempty"`
	MouthRight []uint32 `protobuf:"varint,4,rep,packed,name=mouth_right,json=mouthRight,proto3" json:"mouth_right,omitempty"`
	Nose       []uint32 `protobuf:"varint,5,rep,packed,name=nose,proto3" json:"nose,omitempty"`
	H          uint32   `protobuf:"varint,6,opt,name=h,proto3" json:"h,omitempty"`
	W          uint32   `protobuf:"varint,7,opt,name=w,proto3" json:"w,omitempty"`
	X          uint32   `protobuf:"varint,8,opt,name=x,proto3" json:"x,omitempty"`
	Y          uint32   `protobuf:"varint,9,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *FacialArea) Reset() {
	*x = FacialArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacialArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacialArea) ProtoMessage() {}

func (x *FacialArea) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacialArea.ProtoReflect.Descriptor instead.
func (*FacialArea) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{0}
}

func (x *FacialArea) GetLeftEye() []uint32 {
	if x != nil {
		return x.LeftEye
	}
	return nil
}

func (x *FacialArea) GetRightEye() []uint32 {
	if x != nil {
		return x.RightEye
	}
	return nil
}

func (x *FacialArea) GetMouthLeft() []uint32 {
	if x != nil {
		return x.MouthLeft
	}
	return nil
}

func (x *FacialArea) GetMouthRight() []uint32 {
	if x != nil {
		return x.MouthRight
	}
	return nil
}

func (x *FacialArea) GetNose() []uint32 {
	if x != nil {
		return x.Nose
	}
	return nil
}

func (x *FacialArea) GetH() uint32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *FacialArea) GetW() uint32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *FacialArea) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *FacialArea) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type AnalyzeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl         string                  `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Actions          []AnalyzeRequest_Action `protobuf:"varint,2,rep,packed,name=actions,proto3,enum=deepface.api.proto.AnalyzeRequest_Action" json:"actions,omitempty"` // Actions to perform, e.g., "age", "gender", "emotion", "race"
	DetectorBackend  *Detectors              `protobuf:"varint,3,opt,name=detector_backend,json=detectorBackend,proto3,enum=deepface.api.proto.Detectors,oneof" json:"detector_backend,omitempty"`
	EnforceDetection *bool                   `protobuf:"varint,4,opt,name=enforce_detection,json=enforceDetection,proto3,oneof" json:"enforce_detection,omitempty"`
	Align            *bool                   `protobuf:"varint,5,opt,name=align,proto3,oneof" json:"align,omitempty"`
	AntiSpoofing     *bool                   `protobuf:"varint,6,opt,name=anti_spoofing,json=antiSpoofing,proto3,oneof" json:"anti_spoofing,omitempty"`
	MaxFaces         *uint32                 `protobuf:"varint,7,opt,name=max_faces,json=maxFaces,proto3,oneof" json:"max_faces,omitempty"`
}

func (x *AnalyzeRequest) Reset() {
	*x = AnalyzeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRequest) ProtoMessage() {}

func (x *AnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyzeRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *AnalyzeRequest) GetActions() []AnalyzeRequest_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *AnalyzeRequest) GetDetectorBackend() Detectors {
	if x != nil && x.DetectorBackend != nil {
		return *x.DetectorBackend
	}
	return Detectors_OPENCV
}

func (x *AnalyzeRequest) GetEnforceDetection() bool {
	if x != nil && x.EnforceDetection != nil {
		return *x.EnforceDetection
	}
	return false
}

func (x *AnalyzeRequest) GetAlign() bool {
	if x != nil && x.Align != nil {
		return *x.Align
	}
	return false
}

func (x *AnalyzeRequest) GetAntiSpoofing() bool {
	if x != nil && x.AntiSpoofing != nil {
		return *x.AntiSpoofing
	}
	return false
}

func (x *AnalyzeRequest) GetMaxFaces() uint32 {
	if x != nil && x.MaxFaces != nil {
		return *x.MaxFaces
	}
	return 0
}

type AnalyzeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AnalyzeResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *AnalyzeResponse) Reset() {
	*x = AnalyzeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResponse) ProtoMessage() {}

func (x *AnalyzeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeResponse) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyzeResponse) GetResults() []*AnalyzeResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type RepresentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl         string     `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	ModelName        *Models    `protobuf:"varint,2,opt,name=model_name,json=modelName,proto3,enum=deepface.api.proto.Models,oneof" json:"model_name,omitempty"`
	DetectorBackend  *Detectors `protobuf:"varint,3,opt,name=detector_backend,json=detectorBackend,proto3,enum=deepface.api.proto.Detectors,oneof" json:"detector_backend,omitempty"`
	EnforceDetection *bool      `protobuf:"varint,4,opt,name=enforce_detection,json=enforceDetection,proto3,oneof" json:"enforce_detection,omitempty"`
	Align            *bool      `protobuf:"varint,5,opt,name=align,proto3,oneof" json:"align,omitempty"`
	AntiSpoofing     *bool      `protobuf:"varint,6,opt,name=anti_spoofing,json=antiSpoofing,proto3,oneof" json:"anti_spoofing,omitempty"`
	MaxFaces         *uint32    `protobuf:"varint,7,opt,name=max_faces,json=maxFaces,proto3,oneof" json:"max_faces,omitempty"`
}

func (x *RepresentRequest) Reset() {
	*x = RepresentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepresentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepresentRequest) ProtoMessage() {}

func (x *RepresentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepresentRequest.ProtoReflect.Descriptor instead.
func (*RepresentRequest) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{3}
}

func (x *RepresentRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *RepresentRequest) GetModelName() Models {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return Models_VGG_FACE
}

func (x *RepresentRequest) GetDetectorBackend() Detectors {
	if x != nil && x.DetectorBackend != nil {
		return *x.DetectorBackend
	}
	return Detectors_OPENCV
}

func (x *RepresentRequest) GetEnforceDetection() bool {
	if x != nil && x.EnforceDetection != nil {
		return *x.EnforceDetection
	}
	return false
}

func (x *RepresentRequest) GetAlign() bool {
	if x != nil && x.Align != nil {
		return *x.Align
	}
	return false
}

func (x *RepresentRequest) GetAntiSpoofing() bool {
	if x != nil && x.AntiSpoofing != nil {
		return *x.AntiSpoofing
	}
	return false
}

func (x *RepresentRequest) GetMaxFaces() uint32 {
	if x != nil && x.MaxFaces != nil {
		return *x.MaxFaces
	}
	return 0
}

type RepresentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*RepresentResponse_Results `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *RepresentResponse) Reset() {
	*x = RepresentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepresentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepresentResponse) ProtoMessage() {}

func (x *RepresentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepresentResponse.ProtoReflect.Descriptor instead.
func (*RepresentResponse) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{4}
}

func (x *RepresentResponse) GetResults() []*RepresentResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type VerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image1Url        string           `protobuf:"bytes,1,opt,name=image1_url,json=image1Url,proto3" json:"image1_url,omitempty"`
	Image2Url        string           `protobuf:"bytes,2,opt,name=image2_url,json=image2Url,proto3" json:"image2_url,omitempty"`
	ModelName        *Models          `protobuf:"varint,3,opt,name=model_name,json=modelName,proto3,enum=deepface.api.proto.Models,oneof" json:"model_name,omitempty"`
	DetectorBackend  *Detectors       `protobuf:"varint,4,opt,name=detector_backend,json=detectorBackend,proto3,enum=deepface.api.proto.Detectors,oneof" json:"detector_backend,omitempty"`
	DistanceMetric   *DistanceMetrics `protobuf:"varint,5,opt,name=distance_metric,json=distanceMetric,proto3,enum=deepface.api.proto.DistanceMetrics,oneof" json:"distance_metric,omitempty"`
	EnforceDetection *bool            `protobuf:"varint,6,opt,name=enforce_detection,json=enforceDetection,proto3,oneof" json:"enforce_detection,omitempty"`
	Align            *bool            `protobuf:"varint,7,opt,name=align,proto3,oneof" json:"align,omitempty"`
	AntiSpoofing     *bool            `protobuf:"varint,8,opt,name=anti_spoofing,json=antiSpoofing,proto3,oneof" json:"anti_spoofing,omitempty"`
}

func (x *VerifyRequest) Reset() {
	*x = VerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRequest) ProtoMessage() {}

func (x *VerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRequest.ProtoReflect.Descriptor instead.
func (*VerifyRequest) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{5}
}

func (x *VerifyRequest) GetImage1Url() string {
	if x != nil {
		return x.Image1Url
	}
	return ""
}

func (x *VerifyRequest) GetImage2Url() string {
	if x != nil {
		return x.Image2Url
	}
	return ""
}

func (x *VerifyRequest) GetModelName() Models {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return Models_VGG_FACE
}

func (x *VerifyRequest) GetDetectorBackend() Detectors {
	if x != nil && x.DetectorBackend != nil {
		return *x.DetectorBackend
	}
	return Detectors_OPENCV
}

func (x *VerifyRequest) GetDistanceMetric() DistanceMetrics {
	if x != nil && x.DistanceMetric != nil {
		return *x.DistanceMetric
	}
	return DistanceMetrics_COSINE
}

func (x *VerifyRequest) GetEnforceDetection() bool {
	if x != nil && x.EnforceDetection != nil {
		return *x.EnforceDetection
	}
	return false
}

func (x *VerifyRequest) GetAlign() bool {
	if x != nil && x.Align != nil {
		return *x.Align
	}
	return false
}

func (x *VerifyRequest) GetAntiSpoofing() bool {
	if x != nil && x.AntiSpoofing != nil {
		return *x.AntiSpoofing
	}
	return false
}

type VerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified         bool                        `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	DetectorBackend  Detectors                   `protobuf:"varint,2,opt,name=detector_backend,json=detectorBackend,proto3,enum=deepface.api.proto.Detectors" json:"detector_backend,omitempty"`
	Model            Models                      `protobuf:"varint,3,opt,name=model,proto3,enum=deepface.api.proto.Models" json:"model,omitempty"`
	SimilarityMetric DistanceMetrics             `protobuf:"varint,4,opt,name=similarity_metric,json=similarityMetric,proto3,enum=deepface.api.proto.DistanceMetrics" json:"similarity_metric,omitempty"`
	FacialAreas      *VerifyResponse_FacialAreas `protobuf:"bytes,5,opt,name=facial_areas,json=facialAreas,proto3" json:"facial_areas,omitempty"`
	Distance         float64                     `protobuf:"fixed64,6,opt,name=distance,proto3" json:"distance,omitempty"`
	Threshold        float64                     `protobuf:"fixed64,7,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Time             float64                     `protobuf:"fixed64,8,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *VerifyResponse) Reset() {
	*x = VerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyResponse) ProtoMessage() {}

func (x *VerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyResponse.ProtoReflect.Descriptor instead.
func (*VerifyResponse) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{6}
}

func (x *VerifyResponse) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VerifyResponse) GetDetectorBackend() Detectors {
	if x != nil {
		return x.DetectorBackend
	}
	return Detectors_OPENCV
}

func (x *VerifyResponse) GetModel() Models {
	if x != nil {
		return x.Model
	}
	return Models_VGG_FACE
}

func (x *VerifyResponse) GetSimilarityMetric() DistanceMetrics {
	if x != nil {
		return x.SimilarityMetric
	}
	return DistanceMetrics_COSINE
}

func (x *VerifyResponse) GetFacialAreas() *VerifyResponse_FacialAreas {
	if x != nil {
		return x.FacialAreas
	}
	return nil
}

func (x *VerifyResponse) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *VerifyResponse) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *VerifyResponse) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type AnalyzeResponse_Emotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Angry    float64 `protobuf:"fixed64,1,opt,name=angry,proto3" json:"angry,omitempty"`
	Disgust  float64 `protobuf:"fixed64,2,opt,name=disgust,proto3" json:"disgust,omitempty"`
	Fear     float64 `protobuf:"fixed64,3,opt,name=fear,proto3" json:"fear,omitempty"`
	Happy    float64 `protobuf:"fixed64,4,opt,name=happy,proto3" json:"happy,omitempty"`
	Neutral  float64 `protobuf:"fixed64,5,opt,name=neutral,proto3" json:"neutral,omitempty"`
	Sad      float64 `protobuf:"fixed64,6,opt,name=sad,proto3" json:"sad,omitempty"`
	Surprise float64 `protobuf:"fixed64,7,opt,name=surprise,proto3" json:"surprise,omitempty"`
}

func (x *AnalyzeResponse_Emotion) Reset() {
	*x = AnalyzeResponse_Emotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeResponse_Emotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResponse_Emotion) ProtoMessage() {}

func (x *AnalyzeResponse_Emotion) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResponse_Emotion.ProtoReflect.Descriptor instead.
func (*AnalyzeResponse_Emotion) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AnalyzeResponse_Emotion) GetAngry() float64 {
	if x != nil {
		return x.Angry
	}
	return 0
}

func (x *AnalyzeResponse_Emotion) GetDisgust() float64 {
	if x != nil {
		return x.Disgust
	}
	return 0
}

func (x *AnalyzeResponse_Emotion) GetFear() float64 {
	if x != nil {
		return x.Fear
	}
	return 0
}

func (x *AnalyzeResponse_Emotion) GetHappy() float64 {
	if x != nil {
		return x.Happy
	}
	return 0
}

func (x *AnalyzeResponse_Emotion) GetNeutral() float64 {
	if x != nil {
		return x.Neutral
	}
	return 0
}

func (x *AnalyzeResponse_Emotion) GetSad() float64 {
	if x != nil {
		return x.Sad
	}
	return 0
}

func (x *AnalyzeResponse_Emotion) GetSurprise() float64 {
	if x != nil {
		return x.Surprise
	}
	return 0
}

type AnalyzeResponse_Gender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Man   float64 `protobuf:"fixed64,1,opt,name=man,proto3" json:"man,omitempty"`
	Woman float64 `protobuf:"fixed64,2,opt,name=woman,proto3" json:"woman,omitempty"`
}

func (x *AnalyzeResponse_Gender) Reset() {
	*x = AnalyzeResponse_Gender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeResponse_Gender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResponse_Gender) ProtoMessage() {}

func (x *AnalyzeResponse_Gender) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResponse_Gender.ProtoReflect.Descriptor instead.
func (*AnalyzeResponse_Gender) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{2, 1}
}

func (x *AnalyzeResponse_Gender) GetMan() float64 {
	if x != nil {
		return x.Man
	}
	return 0
}

func (x *AnalyzeResponse_Gender) GetWoman() float64 {
	if x != nil {
		return x.Woman
	}
	return 0
}

type AnalyzeResponse_Race struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asian          float64 `protobuf:"fixed64,1,opt,name=asian,proto3" json:"asian,omitempty"`
	Black          float64 `protobuf:"fixed64,2,opt,name=black,proto3" json:"black,omitempty"`
	Indian         float64 `protobuf:"fixed64,3,opt,name=indian,proto3" json:"indian,omitempty"`
	LatinoHispanic float64 `protobuf:"fixed64,4,opt,name=latino_hispanic,json=latinoHispanic,proto3" json:"latino_hispanic,omitempty"`
	MiddleEastern  float64 `protobuf:"fixed64,5,opt,name=middle_eastern,json=middleEastern,proto3" json:"middle_eastern,omitempty"`
	White          float64 `protobuf:"fixed64,6,opt,name=white,proto3" json:"white,omitempty"`
}

func (x *AnalyzeResponse_Race) Reset() {
	*x = AnalyzeResponse_Race{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeResponse_Race) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResponse_Race) ProtoMessage() {}

func (x *AnalyzeResponse_Race) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResponse_Race.ProtoReflect.Descriptor instead.
func (*AnalyzeResponse_Race) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{2, 2}
}

func (x *AnalyzeResponse_Race) GetAsian() float64 {
	if x != nil {
		return x.Asian
	}
	return 0
}

func (x *AnalyzeResponse_Race) GetBlack() float64 {
	if x != nil {
		return x.Black
	}
	return 0
}

func (x *AnalyzeResponse_Race) GetIndian() float64 {
	if x != nil {
		return x.Indian
	}
	return 0
}

func (x *AnalyzeResponse_Race) GetLatinoHispanic() float64 {
	if x != nil {
		return x.LatinoHispanic
	}
	return 0
}

func (x *AnalyzeResponse_Race) GetMiddleEastern() float64 {
	if x != nil {
		return x.MiddleEastern
	}
	return 0
}

func (x *AnalyzeResponse_Race) GetWhite() float64 {
	if x != nil {
		return x.White
	}
	return 0
}

type AnalyzeResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Age             uint32                   `protobuf:"varint,1,opt,name=age,proto3" json:"age,omitempty"`
	DominantEmotion string                   `protobuf:"bytes,2,opt,name=dominant_emotion,json=dominantEmotion,proto3" json:"dominant_emotion,omitempty"`
	DominantGender  string                   `protobuf:"bytes,3,opt,name=dominant_gender,json=dominantGender,proto3" json:"dominant_gender,omitempty"`
	DominantRace    string                   `protobuf:"bytes,4,opt,name=dominant_race,json=dominantRace,proto3" json:"dominant_race,omitempty"`
	FaceConfidence  float64                  `protobuf:"fixed64,5,opt,name=face_confidence,json=faceConfidence,proto3" json:"face_confidence,omitempty"`
	Emotion         *AnalyzeResponse_Emotion `protobuf:"bytes,6,opt,name=emotion,proto3" json:"emotion,omitempty"`
	Gender          *AnalyzeResponse_Gender  `protobuf:"bytes,7,opt,name=gender,proto3" json:"gender,omitempty"`
	Race            *AnalyzeResponse_Race    `protobuf:"bytes,8,opt,name=race,proto3" json:"race,omitempty"`
	FacialArea      *FacialArea              `protobuf:"bytes,9,opt,name=facial_area,json=facialArea,proto3" json:"facial_area,omitempty"`
}

func (x *AnalyzeResponse_Result) Reset() {
	*x = AnalyzeResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResponse_Result) ProtoMessage() {}

func (x *AnalyzeResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResponse_Result.ProtoReflect.Descriptor instead.
func (*AnalyzeResponse_Result) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{2, 3}
}

func (x *AnalyzeResponse_Result) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *AnalyzeResponse_Result) GetDominantEmotion() string {
	if x != nil {
		return x.DominantEmotion
	}
	return ""
}

func (x *AnalyzeResponse_Result) GetDominantGender() string {
	if x != nil {
		return x.DominantGender
	}
	return ""
}

func (x *AnalyzeResponse_Result) GetDominantRace() string {
	if x != nil {
		return x.DominantRace
	}
	return ""
}

func (x *AnalyzeResponse_Result) GetFaceConfidence() float64 {
	if x != nil {
		return x.FaceConfidence
	}
	return 0
}

func (x *AnalyzeResponse_Result) GetEmotion() *AnalyzeResponse_Emotion {
	if x != nil {
		return x.Emotion
	}
	return nil
}

func (x *AnalyzeResponse_Result) GetGender() *AnalyzeResponse_Gender {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *AnalyzeResponse_Result) GetRace() *AnalyzeResponse_Race {
	if x != nil {
		return x.Race
	}
	return nil
}

func (x *AnalyzeResponse_Result) GetFacialArea() *FacialArea {
	if x != nil {
		return x.FacialArea
	}
	return nil
}

type RepresentResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embedding      []float64   `protobuf:"fixed64,1,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`
	FaceConfidence float64     `protobuf:"fixed64,2,opt,name=face_confidence,json=faceConfidence,proto3" json:"face_confidence,omitempty"`
	FacialArea     *FacialArea `protobuf:"bytes,3,opt,name=facial_area,json=facialArea,proto3" json:"facial_area,omitempty"`
}

func (x *RepresentResponse_Results) Reset() {
	*x = RepresentResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepresentResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepresentResponse_Results) ProtoMessage() {}

func (x *RepresentResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepresentResponse_Results.ProtoReflect.Descriptor instead.
func (*RepresentResponse_Results) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{4, 0}
}

func (x *RepresentResponse_Results) GetEmbedding() []float64 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

func (x *RepresentResponse_Results) GetFaceConfidence() float64 {
	if x != nil {
		return x.FaceConfidence
	}
	return 0
}

func (x *RepresentResponse_Results) GetFacialArea() *FacialArea {
	if x != nil {
		return x.FacialArea
	}
	return nil
}

type VerifyResponse_FacialAreas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Img1 *FacialArea `protobuf:"bytes,1,opt,name=img1,proto3" json:"img1,omitempty"`
	Img2 *FacialArea `protobuf:"bytes,2,opt,name=img2,proto3" json:"img2,omitempty"`
}

func (x *VerifyResponse_FacialAreas) Reset() {
	*x = VerifyResponse_FacialAreas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepface_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyResponse_FacialAreas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyResponse_FacialAreas) ProtoMessage() {}

func (x *VerifyResponse_FacialAreas) ProtoReflect() protoreflect.Message {
	mi := &file_deepface_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyResponse_FacialAreas.ProtoReflect.Descriptor instead.
func (*VerifyResponse_FacialAreas) Descriptor() ([]byte, []int) {
	return file_deepface_proto_rawDescGZIP(), []int{6, 0}
}

func (x *VerifyResponse_FacialAreas) GetImg1() *FacialArea {
	if x != nil {
		return x.Img1
	}
	return nil
}

func (x *VerifyResponse_FacialAreas) GetImg2() *FacialArea {
	if x != nil {
		return x.Img2
	}
	return nil
}

var File_deepface_proto protoreflect.FileDescriptor

var file_deepface_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x01, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x66, 0x74, 0x45, 0x79, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x79, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x75, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0a, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x6f, 0x73, 0x65, 0x12,
	0x0c, 0x0a, 0x01, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x68, 0x12, 0x0c, 0x0a,
	0x01, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x22, 0xe5, 0x03, 0x0a, 0x0e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x10,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x10, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6e, 0x74, 0x69,
	0x5f, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x0c, 0x61, 0x6e, 0x74, 0x69, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x63, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x22, 0x34, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x43, 0x45, 0x10, 0x03, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x69, 0x6e,
	0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22,
	0xb3, 0x07, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x07, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x67, 0x75, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x67, 0x75, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x61, 0x70,
	0x70, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x68, 0x61, 0x70, 0x70, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x61, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73,
	0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x1a, 0x30, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6d, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x6d, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x77, 0x6f, 0x6d, 0x61, 0x6e, 0x1a, 0xb0, 0x01, 0x0a, 0x04, 0x52, 0x61,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x69, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x6f,
	0x5f, 0x68, 0x69, 0x73, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x6f, 0x48, 0x69, 0x73, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x45,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x68, 0x69, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x68, 0x69, 0x74, 0x65, 0x1a, 0xc6, 0x03, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x61,
	0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x04,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x72, 0x65, 0x61, 0x22, 0xbb, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x48, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x10, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x73, 0x70, 0x6f, 0x6f,
	0x66, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0c, 0x61, 0x6e,
	0x74, 0x69, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x73, 0x70, 0x6f,
	0x6f, 0x66, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x22, 0x90, 0x04, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x31, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x31, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x32, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x32, 0x55, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x48,
	0x01, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x48, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x73, 0x70,
	0x6f, 0x6f, 0x66, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0c,
	0x61, 0x6e, 0x74, 0x69, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6e, 0x74, 0x69,
	0x5f, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x69, 0x6e, 0x67, 0x22, 0x92, 0x04, 0x0a, 0x0e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x51, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x0b, 0x66, 0x61,
	0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x75, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6d, 0x67, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x04, 0x69, 0x6d, 0x67, 0x31, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6d,
	0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61,
	0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x52, 0x04, 0x69, 0x6d, 0x67, 0x32, 0x2a, 0xa4,
	0x01, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x47, 0x47,
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x43, 0x45, 0x4e,
	0x45, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x43, 0x45, 0x4e, 0x45, 0x54, 0x35,
	0x31, 0x32, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x4e, 0x46, 0x41, 0x43, 0x45,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x45, 0x50, 0x46, 0x41, 0x43, 0x45, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x45, 0x50, 0x49, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x52, 0x43, 0x46, 0x41, 0x43, 0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4c, 0x49,
	0x42, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x46, 0x41,
	0x43, 0x45, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x46, 0x41, 0x43,
	0x45, 0x4e, 0x45, 0x54, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x55, 0x46, 0x46, 0x41, 0x4c,
	0x4f, 0x5f, 0x4c, 0x10, 0x0a, 0x2a, 0xb4, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x56, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x53, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4c, 0x49, 0x42,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x54, 0x43, 0x4e, 0x4e, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x46, 0x41, 0x53, 0x54, 0x4d, 0x54, 0x43, 0x4e, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x45, 0x54, 0x49, 0x4e, 0x41, 0x46, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x50, 0x49, 0x50, 0x45, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x59,
	0x4f, 0x4c, 0x4f, 0x56, 0x38, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x4c, 0x4f, 0x56,
	0x31, 0x31, 0x53, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x4c, 0x4f, 0x56, 0x31, 0x31,
	0x4e, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x4c, 0x4f, 0x56, 0x31, 0x31, 0x4d, 0x10,
	0x0a, 0x12, 0x09, 0x0a, 0x05, 0x59, 0x55, 0x4e, 0x45, 0x54, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x0c, 0x2a, 0x4b, 0x0a, 0x0f,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x53, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x55, 0x43, 0x4c, 0x49, 0x44, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x55,
	0x43, 0x4c, 0x49, 0x44, 0x45, 0x41, 0x4e, 0x5f, 0x4c, 0x32, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x4e, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x03, 0x32, 0x90, 0x02, 0x0a, 0x0f, 0x44, 0x65,
	0x65, 0x70, 0x46, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a,
	0x07, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x24,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x21, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x65, 0x6e,
	0x67, 0x69, 0x6c, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deepface_proto_rawDescOnce sync.Once
	file_deepface_proto_rawDescData = file_deepface_proto_rawDesc
)

func file_deepface_proto_rawDescGZIP() []byte {
	file_deepface_proto_rawDescOnce.Do(func() {
		file_deepface_proto_rawDescData = protoimpl.X.CompressGZIP(file_deepface_proto_rawDescData)
	})
	return file_deepface_proto_rawDescData
}

var file_deepface_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_deepface_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_deepface_proto_goTypes = []interface{}{
	(Models)(0),                        // 0: deepface.api.proto.Models
	(Detectors)(0),                     // 1: deepface.api.proto.Detectors
	(DistanceMetrics)(0),               // 2: deepface.api.proto.DistanceMetrics
	(AnalyzeRequest_Action)(0),         // 3: deepface.api.proto.AnalyzeRequest.Action
	(*FacialArea)(nil),                 // 4: deepface.api.proto.FacialArea
	(*AnalyzeRequest)(nil),             // 5: deepface.api.proto.AnalyzeRequest
	(*AnalyzeResponse)(nil),            // 6: deepface.api.proto.AnalyzeResponse
	(*RepresentRequest)(nil),           // 7: deepface.api.proto.RepresentRequest
	(*RepresentResponse)(nil),          // 8: deepface.api.proto.RepresentResponse
	(*VerifyRequest)(nil),              // 9: deepface.api.proto.VerifyRequest
	(*VerifyResponse)(nil),             // 10: deepface.api.proto.VerifyResponse
	(*AnalyzeResponse_Emotion)(nil),    // 11: deepface.api.proto.AnalyzeResponse.Emotion
	(*AnalyzeResponse_Gender)(nil),     // 12: deepface.api.proto.AnalyzeResponse.Gender
	(*AnalyzeResponse_Race)(nil),       // 13: deepface.api.proto.AnalyzeResponse.Race
	(*AnalyzeResponse_Result)(nil),     // 14: deepface.api.proto.AnalyzeResponse.Result
	(*RepresentResponse_Results)(nil),  // 15: deepface.api.proto.RepresentResponse.Results
	(*VerifyResponse_FacialAreas)(nil), // 16: deepface.api.proto.VerifyResponse.FacialAreas
}
var file_deepface_proto_depIdxs = []int32{
	3,  // 0: deepface.api.proto.AnalyzeRequest.actions:type_name -> deepface.api.proto.AnalyzeRequest.Action
	1,  // 1: deepface.api.proto.AnalyzeRequest.detector_backend:type_name -> deepface.api.proto.Detectors
	14, // 2: deepface.api.proto.AnalyzeResponse.results:type_name -> deepface.api.proto.AnalyzeResponse.Result
	0,  // 3: deepface.api.proto.RepresentRequest.model_name:type_name -> deepface.api.proto.Models
	1,  // 4: deepface.api.proto.RepresentRequest.detector_backend:type_name -> deepface.api.proto.Detectors
	15, // 5: deepface.api.proto.RepresentResponse.results:type_name -> deepface.api.proto.RepresentResponse.Results
	0,  // 6: deepface.api.proto.VerifyRequest.model_name:type_name -> deepface.api.proto.Models
	1,  // 7: deepface.api.proto.VerifyRequest.detector_backend:type_name -> deepface.api.proto.Detectors
	2,  // 8: deepface.api.proto.VerifyRequest.distance_metric:type_name -> deepface.api.proto.DistanceMetrics
	1,  // 9: deepface.api.proto.VerifyResponse.detector_backend:type_name -> deepface.api.proto.Detectors
	0,  // 10: deepface.api.proto.VerifyResponse.model:type_name -> deepface.api.proto.Models
	2,  // 11: deepface.api.proto.VerifyResponse.similarity_metric:type_name -> deepface.api.proto.DistanceMetrics
	16, // 12: deepface.api.proto.VerifyResponse.facial_areas:type_name -> deepface.api.proto.VerifyResponse.FacialAreas
	11, // 13: deepface.api.proto.AnalyzeResponse.Result.emotion:type_name -> deepface.api.proto.AnalyzeResponse.Emotion
	12, // 14: deepface.api.proto.AnalyzeResponse.Result.gender:type_name -> deepface.api.proto.AnalyzeResponse.Gender
	13, // 15: deepface.api.proto.AnalyzeResponse.Result.race:type_name -> deepface.api.proto.AnalyzeResponse.Race
	4,  // 16: deepface.api.proto.AnalyzeResponse.Result.facial_area:type_name -> deepface.api.proto.FacialArea
	4,  // 17: deepface.api.proto.RepresentResponse.Results.facial_area:type_name -> deepface.api.proto.FacialArea
	4,  // 18: deepface.api.proto.VerifyResponse.FacialAreas.img1:type_name -> deepface.api.proto.FacialArea
	4,  // 19: deepface.api.proto.VerifyResponse.FacialAreas.img2:type_name -> deepface.api.proto.FacialArea
	5,  // 20: deepface.api.proto.DeepFaceService.Analyze:input_type -> deepface.api.proto.AnalyzeRequest
	7,  // 21: deepface.api.proto.DeepFaceService.Represent:input_type -> deepface.api.proto.RepresentRequest
	9,  // 22: deepface.api.proto.DeepFaceService.Verify:input_type -> deepface.api.proto.VerifyRequest
	6,  // 23: deepface.api.proto.DeepFaceService.Analyze:output_type -> deepface.api.proto.AnalyzeResponse
	8,  // 24: deepface.api.proto.DeepFaceService.Represent:output_type -> deepface.api.proto.RepresentResponse
	10, // 25: deepface.api.proto.DeepFaceService.Verify:output_type -> deepface.api.proto.VerifyResponse
	23, // [23:26] is the sub-list for method output_type
	20, // [20:23] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_deepface_proto_init() }
func file_deepface_proto_init() {
	if File_deepface_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deepface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacialArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepresentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepresentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeResponse_Emotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeResponse_Gender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeResponse_Race); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepresentResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepface_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyResponse_FacialAreas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_deepface_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_deepface_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_deepface_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deepface_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deepface_proto_goTypes,
		DependencyIndexes: file_deepface_proto_depIdxs,
		EnumInfos:         file_deepface_proto_enumTypes,
		MessageInfos:      file_deepface_proto_msgTypes,
	}.Build()
	File_deepface_proto = out.File
	file_deepface_proto_rawDesc = nil
	file_deepface_proto_goTypes = nil
	file_deepface_proto_depIdxs = nil
}
